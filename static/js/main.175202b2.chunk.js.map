{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["PageStyle","styled","div","TopDiv","TopImageDiv","TopContentDiv","HeaderSpan","span","ContentDiv","LeftBarDiv","ContentMainDiv","ProjectDiv","App","React","Component","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"u4CAGA,IAAMA,EAAYC,IAAOC,IAAV,KAKTC,EAASF,IAAOC,IAAV,KAQNE,EAAcH,IAAOC,IAAV,KAIXG,EAAgBJ,IAAOC,IAAV,KAMbI,EAAaL,IAAOM,KAAV,KAMVC,EAAaP,IAAOC,IAAV,KAKVO,EAAaR,IAAOC,IAAV,KAUVQ,EAAiBT,IAAOC,IAAV,KAOdS,EAAaV,IAAOC,IAAV,KAyLDU,E,uKArLX,OACE,kBAACZ,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,MACA,kBAACC,EAAD,KACE,+CACA,kBAACC,EAAD,8CACA,kBAACA,EAAD,kCAGJ,kBAACE,EAAD,KACE,kBAACC,EAAD,KACE,uCACA,2eAWA,yCACA,gDACA,mMAMA,sCACA,sDACA,kFACA,2CACA,gIAIA,+CACA,yLAKA,oCACA,oEACA,qDACA,iDACA,0CACA,gFACA,gEACA,6GAIA,sCACA,4IAIA,sCACA,0GAKA,oDACA,8CAEE,4BACE,uCACA,qCACA,+CACA,kDAIJ,yCACA,2BACE,qCADF,aACyB,6BACvB,sCAFF,sBAEmC,6BACjC,qCAHF,YAGwB,8BAGxB,yCACA,2BACE,4BACE,uCACA,4CACA,0CAIN,kBAACC,EAAD,KACE,6BACE,mDACA,4FAEA,kBAACC,EAAD,KACE,yGAKA,4HAEmC,6BAFnC,0EAQF,kBAACA,EAAD,KACE,gFACA,qaAO2B,6BAP3B,2DAQ0D,6BAR1D,iCAaJ,6BACE,yDACA,kBAACA,EAAD,KACE,kHAE0B,6BAF1B,6BAMA,4YAMyD,6BANzD,mGAYF,kBAACA,EAAD,KACE,6GAE0B,6BAF1B,uCAMA,wqBAWwD,6BAXxD,8E,GA/JEE,IAAMC,WC5CJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2wBCZN,IAAMC,EAAcC,YAAH,KAgDjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACJ,EAAD,MACA,kBAAC,EAAD,OAEFK,SAASC,eAAe,SDgFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.175202b2.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst PageStyle = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst TopDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n\n  background: #3b393a;\n  color: #ececec;\n`;\n\nconst TopImageDiv = styled.div`\n  width: 420px;\n`;\n\nconst TopContentDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 20px 40px;\n`;\n\nconst HeaderSpan = styled.span`\n  font-size: 25px;\n  font-weight: 400;\n  margin: 5px 0;\n`;\n\nconst ContentDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst LeftBarDiv = styled.div`\n  float: left;\n  width: 420px;\n  padding: 0px 40px 20px;\n  background: #cfd4d2;\n  color: #2f2d2d;\n  font-family: \"Helvetica CE\";\n  font-size: 21px;\n`;\n\nconst ContentMainDiv = styled.div`\n  flex-grow: 1;\n  justify-content: center;\n  align-items: center;\n  padding: 0 10px;\n`;\n\nconst ProjectDiv = styled.div``;\n\nclass App extends React.Component<{}> {\n  render() {\n    return (\n      <PageStyle>\n        <TopDiv>\n          <TopImageDiv></TopImageDiv>\n          <TopContentDiv>\n            <h1>Piotr Rutkowski</h1>\n            <HeaderSpan>https://www.linkedin.com/in/piorutko/</HeaderSpan>\n            <HeaderSpan>https://github.com/Dpio</HeaderSpan>\n          </TopContentDiv>\n        </TopDiv>\n        <ContentDiv>\n          <LeftBarDiv>\n            <h2>PROFILE</h2>\n            <p>\n              I started working as a software engineer in 2014. During this time\n              I was dealing with creating user interfaces, web services,\n              microservices and complex databases. I'm always interested in\n              finding the best approach with end-users, even if there is a need\n              to visit them. In my day-to-day work, I strongly believe that\n              sharing knowledge and cooperate with teammates improve quality of\n              code in the same way as writing tests, code reviews and using\n              design patterns.\n            </p>\n\n            <h2>EDUCATION</h2>\n            <h3>2010 – 2015</h3>\n            <p>\n              Bachelor of Engineering. University of Technology in Gdansk\n              Faculty: Electronics, Telecommunications And Informatics\n              Specialization: Algorithms and System Modelling\n            </p>\n\n            <h2>SKILLS</h2>\n            <h3>Programming Languages:</h3>\n            <p>C#, TypeScript, JavaScript, CoffeeScript, HTML, CSS</p>\n            <h3>Frameworks:</h3>\n            <p>\n              WPF, WinForms, Entity Framework, NHibernate, Xamarin,\n              Telerik.Data-Access, ASP.NET MVC, .NET Core\n            </p>\n            <h3>.NET Libraries:</h3>\n            <p>\n              Ninject, MVVM light toolkit, AutoFixture, NHapi, PostSharp, MVVM\n              Cross, MassTransit, SemanticComparison, IdentityServer3, Swagger,\n              AutoMapper, MassTransit\n            </p>\n            <h3>Web:</h3>\n            <p>Angular, Webpack, Node.js, HAML, Mobx</p>\n            <h3>Containers & Servers:</h3>\n            <p>Hangfire, RabbitMq</p>\n            <h3>Databases:</h3>\n            <p>PostgreSQL, MySql, MSSql, Elastic- Search, SQLite</p>\n            <h3>Testing, Version Control System:</h3>\n            <p>\n              nUnit, xUnit, Moq, Autofixture, FluentAssertions,\n              SemanticComparison, Git, SVN\n            </p>\n            <h3>Tools:</h3>\n            <p>\n              VSTS, Jira, VisualStudio + R#, Microsoft SQL Server Management\n              Studio, Visual Studio Code, Teamcity, AppVeyor\n            </p>\n            <h3>Other:</h3>\n            <p>\n              WebApi, REST, SOAP, Scrum, Kanban, Kibana, DDD, CQRS, Owin, JWT,\n              IBM Watson\n            </p>\n\n            <h2>ADDITIONAL ACTIVITIE</h2>\n            <p>\n              Participate in :\n              <ul>\n                <li>Agile3m</li>\n                <li>3camp</li>\n                <li>MeetJs meetings</li>\n                <li>Xamarin meetings</li>\n              </ul>\n            </p>\n\n            <h2>LANGUAGES</h2>\n            <p>\n              <b>Polish</b> - native <br />\n              <b>English</b> - advanced/fluent <br />\n              <b>German</b> - basic <br />\n            </p>\n\n            <h2>INTERESTS</h2>\n            <p>\n              <ul>\n                <li>Surfing</li>\n                <li>Board sports</li>\n                <li>Cooking</li>\n              </ul>\n            </p>\n          </LeftBarDiv>\n          <ContentMainDiv>\n            <div>\n              <h2>ACADEMIC EXPERIENCE</h2>\n              <h3>Gdańsk, University of Technology 09.2014 – 02.2015</h3>\n\n              <ProjectDiv>\n                <h4>\n                  09.2014 – 02.2015 Project: Application that supports memory\n                  training\n                </h4>\n\n                <p>\n                  Description: Implementation of few training methods that are\n                  used in classic memory training. <br />\n                  Technologies: XAML, Windows Phone, MVVM Light Toolkit,\n                  Ninject, SCRUM\n                </p>\n              </ProjectDiv>\n\n              <ProjectDiv>\n                <h4>02.2015 – 02.2016 Project: ERD Contractor 2</h4>\n                <p>\n                  Description: Application helping with designing ERD diagrams\n                  for database schemas. It's was designed to replace the old\n                  version of ERD Constructor that was used for many years at the\n                  Gdańsk University of Technology on classes on curses for\n                  projecting databases. It is stand-alone desktop application so\n                  it also could be used by anyone that would like to design\n                  diagram of his database. <br />\n                  Source: https://bitbucket.org/piotrek91/erdconstructor2 <br />\n                  Technologies: Java 8, SCRUM\n                </p>\n              </ProjectDiv>\n            </div>\n            <div>\n              <h2>OTHER PROJECTS EXPERIENCE</h2>\n              <ProjectDiv>\n                <h3>\n                  2017: Let’s Code – Gdańsk Competition url -\n                  http://letscode.sii.pl/ <br />\n                  Project: Room reservation\n                </h3>\n\n                <p>\n                  Description: The application that allows the user to reserve a\n                  room for a meeting with few clicks. The user can also find a\n                  pair of special relax rooms – for example, to play table\n                  tennis. If the user is looking for someone to play he needs to\n                  mark himself as interested and if the system will find a pair\n                  for him it will reserve the room for the nearest slot. <br />\n                  Technologies: C#, .NET Core 2.0, Angular4, TypeScript,\n                  SignalR, WebApi, IdentityServer4, MSSql\n                </p>\n              </ProjectDiv>\n\n              <ProjectDiv>\n                <h3>\n                  2016: Let’s Code – Gdansk Competition url -\n                  http://letscode.sii.pl/ <br />\n                  Project: GitHub for a non-IT person\n                </h3>\n\n                <p>\n                  Description: The application that gathers people with\n                  different skills to cooperate and build a project together.\n                  For example, Alice has an idea for creating some short movie\n                  to collect money for nearest animal shelter, and she wrote\n                  scenario. She also knows Bob that has camera and skills to do\n                  post-production, but they still need someone that be an actor,\n                  someone for sound etc. so they create a project, define what\n                  skills they have, describe the project and who they are\n                  looking for. Other persons can contribute. Application ended\n                  with the possibility to create a project, define it and be\n                  able to contribute but only in the simplest approach. <br />\n                  Technologies: C#, .NET Core 1.0, Angular2, SignalR, WebApi,\n                  MSSql\n                </p>\n              </ProjectDiv>\n            </div>\n          </ContentMainDiv>\n        </ContentDiv>\n      </PageStyle>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createGlobalStyle } from \"styled-components\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst GlobalStyle = createGlobalStyle`\n  html, body {\n    height: 100%;\n    width: 1200px;\n    color: #2f2d2d;\n    font-family: \"Helvetica CE\";\n    font-size: 21px;\n    line-height: 1.25rem;\n  }\n  #root {\n    height: 100%;\n  }\n\n  h1 {\n    color: #ececec;\n    font-size: 38px;\n    font-weight: 700;\n    padding: 0%;\n    margin: 5px 0;\n  }\n\n  h2 {\n    color: #2f2d2d;\n    font-size: 25px;\n    font-weight: 700;\n    text-transform: uppercase;\n  }\n\n  h3 {\n    color: #2f2d2d;\n    font-family: Lato;\n    font-size: 23px;\n    font-weight: 700;\n  }\n\n  h4 {\n    color: #2f2d2d;\n    font-size: 21px;\n    font-weight: 700;\n  }\n\n  p {\n    color: #2f2d2d;\n    font-size: 21px;\n    font-family: \"Helvetica CE\";\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}